<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
    <head>
    <link href="../../html/bootstrap3/css/bootstrap.css" rel="stylesheet">

    <!-- Custom styles for this template -->
	<link rel="stylesheet" href="../../html/css/main.css">
	<link rel="stylesheet" href="../../html/css/jquery-ui.css">

</head>
<body>
<div id="map_pane" style="width:1024px; height:512px">
<div id="map_canvas" style="width:1024px; height:512px"></div>
<div id="caption"></div>
</div>

    <script type="text/javascript" src="../../html/js/jquery.min.js"></script>
    <script type="text/javascript" src="../../html/bootstrap3/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="../../html/js/sc_constant.js"></script>
<script type="text/javascript">
var evid;
var type
//var mmi = ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X+"];
//var zoom = [8, 8, 8, 7, 7, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5];
var facMarkers = [];
//var bar = {'GREY':'bar-grey', 'GREEN':'bar-success', 'YELLOW':'bar-yellow', 'ORANGE':'bar-warning', 'RED':'bar-danger'};

function initialize() {

USGSOverlay.prototype = new google.maps.OverlayView();

  function USGSOverlay(bounds, image, map, opacity, description) {

    // Now initialize all properties.
    this.bounds_ = bounds;
    this.image_ = image;
    this.map_ = map;
    this.opacity_ = opacity;
    this.description_ = description;
	
    // We define a property to hold the image's div. We'll 
    // actually create this div upon receipt of the onAdd() 
    // method so we'll leave it null for now.
    this.div_ = null;

    // Explicitly call setMap on this overlay
    this.setMap(map);
  }

  USGSOverlay.prototype.onAdd = function() {

    // Note: an overlay's receipt of onAdd() indicates that
    // the map's panes are now available for attaching
    // the overlay to the map via the DOM.

    // Create the DIV and set some basic attributes.
    var div = document.createElement('DIV');
    div.style.borderStyle = "none";
    div.style.borderWidth = "0px";
    div.style.position = "absolute";
    //div.style.zIndex = 0;

    this.eventdiv_ = div;

    // Create an IMG element and attach it to the DIV.
    var img = document.createElement("img");
    img.src = this.image_;
    img.style.width = "100%";
    img.style.height = "100%";
	img.style.opacity= (this.opacity_ > 0) ? this.opacity_ : 0.6;
    div.appendChild(img);

    // Set the overlay's div_ property to this DIV
    this.div_ = div;

    // We add an overlay to a map via one of the map's panes.
    // We'll add this overlay to the overlayImage pane.
    var panes = this.getPanes();
    panes.mapPane.appendChild(div);

  }

  USGSOverlay.prototype.draw = function() {

    // Size and position the overlay. We use a southwest and northeast
    // position of the overlay to peg it to the correct position and size.
    // We need to retrieve the projection from this overlay to do this.
    var overlayProjection = this.getProjection();

    // Retrieve the southwest and northeast coordinates of this overlay
    // in latlngs and convert them to pixels coordinates.
    // We'll use these coordinates to resize the DIV.
    var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
    var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());

    // Resize the image's DIV to fit the indicated dimensions.
    var div = this.div_;
    div.style.left = sw.x + 'px';
    div.style.top = ne.y + 'px';
    div.style.width = (ne.x - sw.x) + 'px';
    div.style.height = (sw.y - ne.y) + 'px';
  }

  USGSOverlay.prototype.onRemove = function() {
    this.div_.parentNode.removeChild(this.div_);
    this.div_ = null;
  }

    function addMarker(map, facility) {
		var lat, lon;
		var icon_type;
		
		if (facility.facility_type == "epicenter") {
			lat = parseFloat(facility.origin_lat);
			lon = parseFloat(facility.origin_lon);
			icon_type =  facility.facility_type;
			icon_type = icon_type.toLowerCase();
		} else {
			lat = parseFloat(facility.lat_min);
			lon = parseFloat(facility.lon_min);
			icon_type =  facility.facility_type + facility.damage_level;
			icon_type = icon_type.toLowerCase();
		}
		//MAPAPP.addMarker(new google.maps.LatLng(lat, lon), domdata);
		var markerimage  = new google.maps.MarkerImage("../../images/" + icon_type + ".png",
			new google.maps.Size(25,25),
			new google.maps.Point(0,0),
			new google.maps.Point(12,12));				
			
		var marker = new google.maps.Marker({
			position: new google.maps.LatLng(lat, lon), 
			icon: markerimage,
			map: map,
		});
		//facMarkers.push(marker);
        
    } // addMarker

	var local_url = 'fac_damage.json';
	$.getJSON(local_url, function(data) {

	  	var grid = data.grid;
		  console.log(grid);
	  // Are there even any EQ to display?
	  if (typeof grid.shakemap_id === "undefined") {
		return;
	  }
		var lat_min = parseFloat(grid.lat_min);
		var lat_max = parseFloat(grid.lat_max);
		var lon_min = parseFloat(grid.lon_min);
		var lon_max = parseFloat(grid.lon_max);

		var rectBounds = new google.maps.LatLngBounds(
					new google.maps.LatLng(lat_min, lon_min),
					new google.maps.LatLng(lat_max, lon_max));
		var img = 'ii_overlay.png';
		var latlng = new google.maps.LatLng((lat_min+lat_max)/2, (lon_min+lon_max)/2);

		var map = new google.maps.Map(document.getElementById('map_canvas'), {
			center: latlng,
			scrollwheel: false,
			zoom: zoom[parseInt(lat_max-lat_min+0.5)]
		});

			var detailsMapLayerOptions = {
			getTileUrl: function(tile, zoom) {
				//console.debug(X);
				//return "/server_event.php?x="+tile.x+"&y="+tile.y+"&zoom="+zoom; },
				var tilesAtThisZoom = 1 << zoom;
				var tilex = tile.x % tilesAtThisZoom;
				//if (zoom > TILE_ZOOM) {
					//return "/scripts/gmap.pl/event/"+tile.x+","+tile.y+","+zoom;
				//} else {
					return "../../html/tiles/event/"+zoom+"/"+tilex+"/"+tile.y+".png";
				//}
				},
			tileSize: new google.maps.Size(256, 256),
			isPng: true
			};
			eventMapLayer = new google.maps.ImageMapType(detailsMapLayerOptions);
			//map.overlayMapTypes.insertAt("0",eventMapLayer);
			map.overlayMapTypes.insertAt("1", eventMapLayer);

		console.log(zoom[parseInt(lat_max-lat_min+0.5)]+' '+parseInt(lat_max-lat_min+0.5));

		//MAPAPP.loadSM(rectBounds, img);
		var smOverlay = new USGSOverlay(rectBounds, img, map);

		var event = grid;
		event.facility_type = "epicenter";
		addMarker(map, event);
		
			
		  for ( var key in data.facility_damage)
			{
			addMarker(map, data.facility_damage[key]);

			};


		var damage_summary = '<div class="progress">';
    var summary = data.damage_summary;
		// Are there even any EQ to display?
		if (data.count > 0) {
			//jQuery.each(data.damage_summary, function(i, val) {
			jQuery.each(bar, function(i, val) {
				damage_summary += '<div class="progress-bar ' + val + '" style="width:20%;">' + ((summary[i]) ? summary[i] : 0) + '</div>';
			});
		}
		damage_summary += '</div>';
		$("#caption").html(damage_summary);
	});


		$('html').width($("map_pane").width());
		$('html').height($("map_pane").height());

} // initializek


</script>
    <script type="text/javascript" src="https://maps.google.com/maps/api/js?key=AIzaSyBwGKHF5aDqUf4hiVmhucoGLIiaC5FcLHI&callback=initialize"></script>
</body></html>
