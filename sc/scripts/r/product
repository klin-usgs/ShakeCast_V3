#!/usr/local/bin/perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Carp;

use CGI;
use CGI::Session;
use JSON::XS;
use Data::Dumper;

use SC;
use API::Product;
use API::APIUtil;

my $self = new CGI;
my $session = new CGI::Session("driver:File", $self, {Directory=>"$FindBin::Bin/../../tmp"});
$session->expires("+10m");
my $cookie = $self->cookie(CGISESSID => $session->id );
print $self->header(-type=>'application/json', -cookie=>$cookie);
#print "Content-Type: application/json\n\n";

my $domain = $session->param('domain');
my $conf_file = "$FindBin::Bin/../../../$domain/conf/sc.conf";
$session->param('cgi', $self->param('type'));
#$session->param('session', $conf_file);
SC->initialize($conf_file);
#SC->initialize();

my $default_options = API::APIUtil::config_options();
my $hash_file = SC->config->{'RootDir'}.'/db/product.hash';
store_hash() unless (-e $hash_file);

my $arg = ($ENV{PATH_INFO}) ? $ENV{PATH_INFO} : $ARGV[0];
my (@args) = split '/', $arg;
shift @args;
my $action = shift @args;

unless ( $session->param("~logged-in")) {
    exit(0);
}
if (not defined *{$action} ) {
} else {
    SC->log(0, "product: task is $action $args[0]");

	no strict 'refs';
    # perform the requested action
    #eval {
	my $json =  &{ $action }( @args );
	print JSON::XS->new->utf8->encode(API::APIUtil::stringfy($json));
    #};
}

    # Authenticated
sub from_id {
	my ($shakemap) = @_;

	my ($shakemap_id, $shakemap_version) = $shakemap =~ /(.*)-(\d+)$/;
	my $product = new API::Product->from_id($shakemap_id, $shakemap_version);

	return $product;
}

    # Authenticated
sub product_source_list {
	my ($shakemap) = @_;

	my ($shakemap_id, $shakemap_version) = $shakemap =~ /(.*)-(\d+)$/;
	my $product = new API::Product->product_source_list();

	return $product;
}

  # / (with authentication)
sub product_type {
	my ($type) = @_;
	unless ( $session->param("admin_user")) {
		return 0;
	}

	my $product = new API::Product->product_type_list($type);

	return $product;
  };
  
sub toggle {
	unless ( $session->param("admin_user")) {
		return 0;
	}
    # Authenticated
    my $product_id = $self->param('product_id');
    my $save_flag = $self->param('save');
    my $event;
    $event->{'result'} = new API::Product->toggle_product_display($product_id);
    $event->{'flag'} = $save_flag;
	
	store_hash();

    return $event;
  };
  
sub store_hash {
	unless ( $session->param("admin_user")) {
		return 0;
	}
    # Authenticated

	my %product_list;

	my $product = new API::Product->product_type_list('ALL');
	
	foreach my $item (@$product) {
		$product_list{$item->{'filename'}} = $item->{'display'};
	}

	use Storable;

	store \%product_list, $hash_file;
    
	return \%product_list;
  };
  

